#!/usr/bin/env node

/**
 * üöÄ SCRIPT DE ATIVA√á√ÉO - LAYOUT MINIMALISTA CRM-V3-MINIMALIA
 *
 * Este script ativa o novo layout minimalista com seguran√ßa,
 * criando backups dos arquivos atuais.
 */

const fs = require("fs");
const path = require("path");

const CONFIG = {
  backupSuffix: ".backup-" + new Date().toISOString().slice(0, 10),
  srcDir: path.join(__dirname, "../src"),
  routerDir: path.join(__dirname, "../src/router"),
  appFile: path.join(__dirname, "../src/App.tsx"),
  logFile: path.join(__dirname, "../activation.log"),
};

// Fun√ß√£o de log
function log(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  console.log(message);
  fs.appendFileSync(CONFIG.logFile, logMessage);
}

// Fun√ß√£o para fazer backup de arquivo
function backupFile(filePath) {
  if (fs.existsSync(filePath)) {
    const backupPath = filePath + CONFIG.backupSuffix;
    fs.copyFileSync(filePath, backupPath);
    log(`‚úÖ Backup criado: ${path.basename(backupPath)}`);
    return true;
  }
  return false;
}

// Fun√ß√£o para verificar depend√™ncias
function checkDependencies() {
  log("üîç Verificando depend√™ncias...");

  const requiredFiles = [
    "src/components/Layout/MinimalistSaaSLayout.tsx",
    "src/components/CRM/MinimalistCRMDashboard.tsx",
    "src/pages/CRM/CRMMinimalist.tsx",
    "src/router/minimalist.tsx",
  ];

  for (const file of requiredFiles) {
    const fullPath = path.join(__dirname, "..", file);
    if (!fs.existsSync(fullPath)) {
      log(`‚ùå Arquivo necess√°rio n√£o encontrado: ${file}`);
      return false;
    }
  }

  log("‚úÖ Todas as depend√™ncias encontradas");
  return true;
}

// Fun√ß√£o para ativar router minimalista
function activateMinimalistRouter() {
  log("üîÑ Ativando router minimalista...");

  const currentRouter = path.join(CONFIG.routerDir, "corrected.tsx");
  const minimalistRouter = path.join(CONFIG.routerDir, "minimalist.tsx");

  // Backup do router atual
  if (backupFile(currentRouter)) {
    // Copiar router minimalista
    if (fs.existsSync(minimalistRouter)) {
      fs.copyFileSync(minimalistRouter, currentRouter);
      log("‚úÖ Router minimalista ativado");
      return true;
    } else {
      log("‚ùå Router minimalista n√£o encontrado");
      return false;
    }
  }

  return false;
}

// Fun√ß√£o para atualizar App.tsx (se necess√°rio)
function updateAppFile() {
  log("üîÑ Verificando App.tsx...");

  if (fs.existsSync(CONFIG.appFile)) {
    const content = fs.readFileSync(CONFIG.appFile, "utf8");

    // Verificar se j√° est√° usando o router correto
    if (content.includes("corrected")) {
      log("‚úÖ App.tsx j√° configurado para usar router corrected");
      return true;
    } else {
      log("‚ö†Ô∏è  App.tsx pode precisar de ajustes manuais");
      return true;
    }
  }

  log("‚ùå App.tsx n√£o encontrado");
  return false;
}

// Fun√ß√£o para criar arquivo de status
function createStatusFile() {
  const status = {
    version: "CRM-V3-MINIMALIA",
    activated: new Date().toISOString(),
    layout: "MinimalistSaaSLayout",
    router: "minimalist",
    features: [
      "Layout SaaS 2025",
      "Widgets colaps√°veis",
      "Quick actions",
      "IA contextual",
      "Filtros sticky",
      "Menu contextual",
      "Busca global",
      "Navega√ß√£o fluida",
    ],
    status: "active",
  };

  fs.writeFileSync(
    path.join(__dirname, "../MINIMALIST_STATUS.json"),
    JSON.stringify(status, null, 2),
  );

  log("‚úÖ Arquivo de status criado");
}

// Fun√ß√£o para mostrar pr√≥ximos passos
function showNextSteps() {
  log("\nüéâ ATIVA√á√ÉO CONCLU√çDA!\n");
  log("üìã PR√ìXIMOS PASSOS:");
  log("1. Reinicie o servidor de desenvolvimento");
  log("2. Acesse /painel para ver o novo layout");
  log("3. Teste as funcionalidades:");
  log("   - Busca global (‚åòK)");
  log("   - Quick actions (+Cliente, +Processo)");
  log("   - Widgets colaps√°veis");
  log("   - Menu contextual (3 pontos)");
  log("   - Filtros sticky");
  log("4. Verifique responsividade em mobile");
  log("5. Configure personaliza√ß√£o se necess√°rio\n");
  log("üìÑ Documenta√ß√£o: MINIMALIST_LAYOUT_SUMMARY.md");
  log("üîÑ Para reverter: use os arquivos .backup-*");
}

// Fun√ß√£o principal
function main() {
  log("üöÄ INICIANDO ATIVA√á√ÉO DO LAYOUT MINIMALISTA CRM-V3-MINIMALIA\n");

  try {
    // Verificar depend√™ncias
    if (!checkDependencies()) {
      log("‚ùå Falha na verifica√ß√£o de depend√™ncias");
      process.exit(1);
    }

    // Ativar router minimalista
    if (!activateMinimalistRouter()) {
      log("‚ùå Falha ao ativar router minimalista");
      process.exit(1);
    }

    // Verificar App.tsx
    if (!updateAppFile()) {
      log("‚ö†Ô∏è  Problemas com App.tsx - verifica√ß√£o manual necess√°ria");
    }

    // Criar arquivo de status
    createStatusFile();

    // Mostrar pr√≥ximos passos
    showNextSteps();

    log("‚úÖ ATIVA√á√ÉO CONCLU√çDA COM SUCESSO!");
  } catch (error) {
    log(`‚ùå ERRO DURANTE ATIVA√á√ÉO: ${error.message}`);
    process.exit(1);
  }
}

// Executar script
if (require.main === module) {
  main();
}

module.exports = { main, CONFIG };
