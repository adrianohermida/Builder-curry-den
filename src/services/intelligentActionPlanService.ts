import {
  IntelligentActionPlan,
  IntelligentActionPlanItem,
  ContinuousMonitorConfig,
  UserPermissions,
  SecurityAuditLog,
  AutomationRule,
  MonitoringEvent,
  AnalysisReport,
  ExecutionLog,
} from "../types/intelligentActionPlan";
import { ModuleName } from "../types/actionPlan";
import { systemAnalysisService } from "./systemAnalysisService";

class IntelligentActionPlanService {
  private actionPlan: IntelligentActionPlan | null = null;
  private config: ContinuousMonitorConfig;
  private permissions: UserPermissions;
  private monitoringInterval: NodeJS.Timeout | null = null;
  private eventListeners: Map<string, ((event: MonitoringEvent) => void)[]> =
    new Map();
  private executionQueue: IntelligentActionPlanItem[] = [];
  private isExecuting = false;

  constructor() {
    this.config = {
      enabled: true,
      interval: 30, // 30 minutos
      modules_to_monitor: [
        "CRM Jur√≠dico",
        "IA Jur√≠dica",
        "GED",
        "Tarefas",
        "Publica√ß√µes",
        "Atendimento",
        "Agenda",
        "Financeiro",
        "Configura√ß√µes",
        "Design System",
        "Features Beta",
      ],
      auto_generate_tasks: true,
      auto_execute_safe_tasks: false,
      notification_threshold: "m√©dia",
      max_concurrent_executions: 3,
    };

    this.permissions = {
      can_approve_critical: false,
      can_execute_automated: false,
      can_modify_config: false,
      can_view_logs: true,
      can_access_hidden_modules: false,
      role: "usuario",
    };

    this.loadActionPlan();
    this.startContinuousMonitoring();
  }

  // üìñ Leitura e Interpreta√ß√£o Din√¢mica
  async loadActionPlan(): Promise<IntelligentActionPlan> {
    try {
      const saved = localStorage.getItem(
        "intelligent-action-plan-lawdesk-2025",
      );
      if (saved) {
        this.actionPlan = JSON.parse(saved);
      } else {
        // Cria plano inicial se n√£o existir
        this.actionPlan = await this.createInitialActionPlan();
        await this.saveActionPlan();
      }

      this.emitEvent({
        id: `load_${Date.now()}`,
        timestamp: new Date().toISOString(),
        tipo: "task_created",
        severidade: "info",
        dados: {
          message: "Plano de a√ß√£o carregado com sucesso",
          version: this.actionPlan.vers√£o,
        },
      });

      return this.actionPlan;
    } catch (error) {
      console.error("Erro ao carregar plano de a√ß√£o:", error);
      throw error;
    }
  }

  private async createInitialActionPlan(): Promise<IntelligentActionPlan> {
    const now = new Date().toISOString();

    return {
      id: "lawdesk-2025",
      vers√£o: "1.0.0",
      criado_em: now,
      atualizado_em: now,
      status: "ativo",
      descri√ß√£o:
        "Plano de A√ß√£o Inteligente Lawdesk 2025 - Melhoria Cont√≠nua e Automatizada",
      configura√ß√µes: {
        execu√ß√£o_autom√°tica: false,
        an√°lise_cont√≠nua: true,
        notifica√ß√µes: true,
        aprova√ß√£o_autom√°tica: false,
        backup_autom√°tico: true,
      },
      tarefas: await this.generateInitialTasks(),
      hist√≥rico: [
        {
          vers√£o: "1.0.0",
          timestamp: now,
          altera√ß√µes: ["Cria√ß√£o do plano inicial"],
          executor: "sistema",
          motivo: "Inicializa√ß√£o do sistema",
        },
      ],
      m√©tricas_globais: {
        total_tarefas: 0,
        tarefas_conclu√≠das: 0,
        tarefas_em_execu√ß√£o: 0,
        tarefas_pendentes: 0,
        tempo_m√©dio_execu√ß√£o: 0,
        taxa_sucesso: 0,
        problemas_detectados: 0,
        melhorias_aplicadas: 0,
        √∫ltima_an√°lise: now,
      },
    };
  }

  private async generateInitialTasks(): Promise<IntelligentActionPlanItem[]> {
    const now = new Date().toISOString();

    return [
      {
        id: "task-001",
        tarefa: "An√°lise inicial de performance dos m√≥dulos",
        m√≥dulo: "Configura√ß√µes",
        prioridade: "alta",
        origem: "an√°lise autom√°tica",
        etapas: [
          "Executar an√°lise Lighthouse em todos os m√≥dulos",
          "Identificar gargalos de performance",
          "Gerar relat√≥rio detalhado",
          "Criar tarefas espec√≠ficas para otimiza√ß√µes",
        ],
        criado_em: now,
        status: "pendente",
        sugest√£o_IA:
          "Iniciar com an√°lise completa para estabelecer baseline de performance",
        m√©tricas: {
          tempo_estimado: 2,
          complexidade: "m√©dia",
          impacto: "alto",
          urg√™ncia: "alta",
        },
      },
      {
        id: "task-002",
        tarefa: "Implementar monitoramento cont√≠nuo de acessibilidade",
        m√≥dulo: "Design System",
        prioridade: "alta",
        origem: "an√°lise autom√°tica",
        etapas: [
          "Configurar ferramentas de auditoria autom√°tica WCAG",
          "Criar dashboard de m√©tricas de acessibilidade",
          "Implementar alertas para problemas cr√≠ticos",
          "Gerar relat√≥rios peri√≥dicos",
        ],
        criado_em: now,
        status: "pendente",
        sugest√£o_IA: "Acessibilidade √© fundamental para conformidade legal",
        m√©tricas: {
          tempo_estimado: 4,
          complexidade: "alta",
          impacto: "alto",
          urg√™ncia: "m√©dia",
        },
      },
      {
        id: "task-003",
        tarefa: "Otimiza√ß√£o responsiva do m√≥dulo GED",
        m√≥dulo: "GED",
        prioridade: "m√©dia",
        origem: "an√°lise autom√°tica",
        etapas: [
          "Revisar layout da √°rvore de pastas em mobile",
          "Implementar navega√ß√£o touch-friendly",
          "Otimizar grid de documentos para tablets",
          "Testar em diferentes dispositivos",
        ],
        criado_em: now,
        status: "pendente",
        sugest√£o_IA:
          "GED √© m√≥dulo cr√≠tico que precisa funcionar bem em todos os dispositivos",
        m√©tricas: {
          tempo_estimado: 6,
          complexidade: "m√©dia",
          impacto: "m√©dio",
          urg√™ncia: "m√©dia",
        },
      },
    ];
  }

  // ‚öôÔ∏è Execu√ß√£o Modular Contextual
  async executeTask(taskId: string): Promise<void> {
    if (!this.actionPlan) {
      throw new Error("Plano de a√ß√£o n√£o carregado");
    }

    const task = this.actionPlan.tarefas.find((t) => t.id === taskId);
    if (!task) {
      throw new Error("Tarefa n√£o encontrada");
    }

    // Validar depend√™ncias
    if (task.depend√™ncias) {
      const dependenciesCompleted = task.depend√™ncias.every((depId) => {
        const dep = this.actionPlan!.tarefas.find((t) => t.id === depId);
        return dep?.status === "conclu√≠do";
      });

      if (!dependenciesCompleted) {
        throw new Error("Depend√™ncias n√£o conclu√≠das");
      }
    }

    // Verificar permiss√µes
    if (
      task.prioridade === "cr√≠tica" &&
      !this.permissions.can_approve_critical
    ) {
      throw new Error("Permiss√£o insuficiente para executar tarefa cr√≠tica");
    }

    try {
      // Marcar como em execu√ß√£o
      task.status = "em execu√ß√£o";
      task.execu√ß√£o = {
        iniciado_em: new Date().toISOString(),
        executor: "dev",
        logs: [],
      };

      this.addExecutionLog(task, "info", "Iniciando execu√ß√£o da tarefa");

      // Executar etapas
      for (let i = 0; i < task.etapas.length; i++) {
        const etapa = task.etapas[i];
        this.addExecutionLog(
          task,
          "info",
          `Executando etapa ${i + 1}: ${etapa}`,
        );

        // Simular execu√ß√£o (aqui seria a l√≥gica real de execu√ß√£o)
        await this.executeStep(task, etapa);

        this.addExecutionLog(task, "success", `Etapa ${i + 1} conclu√≠da`);
      }

      // Executar testes
      await this.runTaskTests(task);

      // Marcar como conclu√≠do
      task.status = "conclu√≠do";
      task.execu√ß√£o!.conclu√≠do_em = new Date().toISOString();

      this.addExecutionLog(task, "success", "Tarefa conclu√≠da com sucesso");

      // Atualizar m√©tricas
      this.updateMetrics();

      // Salvar plano
      await this.saveActionPlan();

      this.emitEvent({
        id: `task_completed_${Date.now()}`,
        timestamp: new Date().toISOString(),
        tipo: "task_completed",
        m√≥dulo: task.m√≥dulo,
        severidade: "info",
        dados: { task_id: taskId, task_title: task.tarefa },
      });
    } catch (error) {
      task.status = "em revis√£o";
      this.addExecutionLog(task, "error", `Erro na execu√ß√£o: ${error}`);
      throw error;
    }
  }

  private async executeStep(
    task: IntelligentActionPlanItem,
    step: string,
  ): Promise<void> {
    // Aqui seria implementada a l√≥gica espec√≠fica para cada tipo de etapa
    // Por exemplo, melhorias de CSS, otimiza√ß√µes de performance, etc.

    // Simular tempo de execu√ß√£o
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // Aplicar melhorias baseadas no m√≥dulo e tipo de tarefa
    switch (task.m√≥dulo) {
      case "GED":
        await this.applyGEDImprovements(step);
        break;
      case "CRM Jur√≠dico":
        await this.applyCRMImprovements(step);
        break;
      case "Design System":
        await this.applyDesignSystemImprovements(step);
        break;
      // ... outros m√≥dulos
    }
  }

  private async applyGEDImprovements(step: string): Promise<void> {
    // Implementar melhorias espec√≠ficas do GED
    if (step.includes("responsiva") || step.includes("mobile")) {
      // Aplicar melhorias de responsividade
      console.log("Aplicando melhorias de responsividade no GED");
    }
    if (step.includes("performance")) {
      // Aplicar otimiza√ß√µes de performance
      console.log("Aplicando otimiza√ß√µes de performance no GED");
    }
  }

  private async applyCRMImprovements(step: string): Promise<void> {
    // Implementar melhorias espec√≠ficas do CRM
    console.log("Aplicando melhorias no CRM:", step);
  }

  private async applyDesignSystemImprovements(step: string): Promise<void> {
    // Implementar melhorias no Design System
    console.log("Aplicando melhorias no Design System:", step);
  }

  private addExecutionLog(
    task: IntelligentActionPlanItem,
    nivel: "info" | "warning" | "error" | "success",
    mensagem: string,
  ): void {
    if (!task.execu√ß√£o) {
      task.execu√ß√£o = { logs: [] };
    }
    if (!task.execu√ß√£o.logs) {
      task.execu√ß√£o.logs = [];
    }

    const log: ExecutionLog = {
      id: `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date().toISOString(),
      nivel,
      mensagem,
      executor: "ai",
      componente: task.m√≥dulo,
    };

    task.execu√ß√£o.logs.push(log);
  }

  // üîÅ An√°lise Cont√≠nua do Sistema
  private startContinuousMonitoring(): void {
    if (this.config.enabled && !this.monitoringInterval) {
      this.monitoringInterval = setInterval(
        async () => {
          await this.performSystemAnalysis();
        },
        this.config.interval * 60 * 1000,
      ); // converter para millisegundos

      console.log(
        `Monitoramento cont√≠nuo iniciado (${this.config.interval} minutos)`,
      );
    }
  }

  private stopContinuousMonitoring(): void {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
      console.log("Monitoramento cont√≠nuo parado");
    }
  }

  async performSystemAnalysis(): Promise<AnalysisReport> {
    console.log("Iniciando an√°lise autom√°tica do sistema...");

    const report = await systemAnalysisService.analyzeAllModules(
      this.config.modules_to_monitor,
    );

    // Gerar tarefas baseadas nos problemas encontrados
    if (this.config.auto_generate_tasks) {
      await this.generateTasksFromAnalysis(report);
    }

    // Executar tarefas seguras automaticamente
    if (this.config.auto_execute_safe_tasks) {
      await this.executeAutomaticTasks();
    }

    this.emitEvent({
      id: `analysis_complete_${Date.now()}`,
      timestamp: new Date().toISOString(),
      tipo: "system_alert",
      severidade: "info",
      dados: {
        problems_found:
          report.resumo.problemas_cr√≠ticos + report.resumo.problemas_altos,
        suggestions: report.resumo.melhorias_sugeridas,
      },
    });

    return report;
  }

  // üß† Gera√ß√£o e Atualiza√ß√£o Inteligente do Plano de A√ß√£o
  private async generateTasksFromAnalysis(
    report: AnalysisReport,
  ): Promise<void> {
    if (!this.actionPlan) return;

    const newTasks: IntelligentActionPlanItem[] = [];

    for (const suggestion of report.recomenda√ß√µes) {
      if (
        suggestion.prioridade === "cr√≠tica" ||
        suggestion.prioridade === "alta"
      ) {
        const task: IntelligentActionPlanItem = {
          id: `auto_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          tarefa: suggestion.t√≠tulo,
          m√≥dulo: this.determineModuleFromSuggestion(suggestion.descri√ß√£o),
          prioridade: suggestion.prioridade,
          origem: "an√°lise autom√°tica",
          etapas: suggestion.etapas_sugeridas,
          criado_em: new Date().toISOString(),
          status: "pendente",
          sugest√£o_IA: suggestion.justificativa,
          m√©tricas: {
            tempo_estimado: suggestion.esfor√ßo_estimado,
            complexidade: this.mapComplexity(suggestion.esfor√ßo_estimado),
            impacto: suggestion.impacto_estimado,
            urg√™ncia: suggestion.prioridade === "cr√≠tica" ? "alta" : "m√©dia",
          },
        };

        newTasks.push(task);
      }
    }

    this.actionPlan.tarefas.push(...newTasks);
    this.updateMetrics();
    await this.saveActionPlan();

    if (newTasks.length > 0) {
      this.emitEvent({
        id: `tasks_generated_${Date.now()}`,
        timestamp: new Date().toISOString(),
        tipo: "task_created",
        severidade: "info",
        dados: { count: newTasks.length, tasks: newTasks.map((t) => t.tarefa) },
      });
    }
  }

  private determineModuleFromSuggestion(description: string): ModuleName {
    const keywords = {
      GED: ["ged", "documento", "arquivo", "pasta", "upload"],
      "CRM Jur√≠dico": ["crm", "cliente", "processo", "juridico"],
      Publica√ß√µes: ["publica√ß√£o", "di√°rio", "tribunal"],
      Agenda: ["agenda", "compromisso", "evento"],
      "IA Jur√≠dica": ["ia", "inteligencia", "artificial", "an√°lise"],
      Tarefas: ["tarefa", "todo", "pendencia"],
      Financeiro: ["financeiro", "fatura", "pagamento"],
      Atendimento: ["atendimento", "ticket", "suporte"],
      "Design System": ["design", "ui", "interface", "componente"],
      "Features Beta": ["beta", "experimental", "novo"],
    };

    const lowerDesc = description.toLowerCase();

    for (const [module, words] of Object.entries(keywords)) {
      if (words.some((word) => lowerDesc.includes(word))) {
        return module as ModuleName;
      }
    }

    return "Configura√ß√µes"; // default
  }

  private mapComplexity(effort: number): "baixa" | "m√©dia" | "alta" {
    if (effort <= 2) return "baixa";
    if (effort <= 8) return "m√©dia";
    return "alta";
  }

  // üß™ Testes e Logs Inteligentes
  private async runTaskTests(task: IntelligentActionPlanItem): Promise<void> {
    this.addExecutionLog(task, "info", "Iniciando testes autom√°ticos");

    task.testes = {
      executados: true,
      resultados: [],
    };

    // Simular execu√ß√£o de testes
    const tests = [
      { nome: "Teste de Responsividade", tipo: "integration" as const },
      { nome: "Teste de Performance", tipo: "performance" as const },
      { nome: "Teste de Acessibilidade", tipo: "accessibility" as const },
    ];

    for (const test of tests) {
      const success = Math.random() > 0.2; // 80% de chance de sucesso

      task.testes.resultados!.push({
        id: `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        nome: test.nome,
        tipo: test.tipo,
        status: success ? "passed" : "failed",
        tempo_execu√ß√£o: Math.random() * 5000,
        timestamp: new Date().toISOString(),
        detalhes: success
          ? "Teste passou com sucesso"
          : "Teste falhou - verificar implementa√ß√£o",
      });

      this.addExecutionLog(
        task,
        success ? "success" : "error",
        `${test.nome}: ${success ? "PASSOU" : "FALHOU"}`,
      );
    }

    // Simular scores
    task.testes.lighthouse_score = 85 + Math.random() * 15;
    task.testes.accessibility_score = 80 + Math.random() * 20;
  }

  // Event system
  addEventListener(
    eventType: string,
    callback: (event: MonitoringEvent) => void,
  ): void {
    if (!this.eventListeners.has(eventType)) {
      this.eventListeners.set(eventType, []);
    }
    this.eventListeners.get(eventType)!.push(callback);
  }

  removeEventListener(
    eventType: string,
    callback: (event: MonitoringEvent) => void,
  ): void {
    const listeners = this.eventListeners.get(eventType);
    if (listeners) {
      const index = listeners.indexOf(callback);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    }
  }

  private emitEvent(event: MonitoringEvent): void {
    const listeners = this.eventListeners.get(event.tipo) || [];
    listeners.forEach((callback) => callback(event));

    // Log global events
    console.log(`[Intelligent Action Plan] ${event.tipo}:`, event.dados);
  }

  // Getters
  getActionPlan(): IntelligentActionPlan | null {
    return this.actionPlan;
  }

  getConfig(): ContinuousMonitorConfig {
    return { ...this.config };
  }

  getPermissions(): UserPermissions {
    return { ...this.permissions };
  }

  // Setters
  async updateConfig(
    newConfig: Partial<ContinuousMonitorConfig>,
  ): Promise<void> {
    if (!this.permissions.can_modify_config) {
      throw new Error("Permiss√£o insuficiente para modificar configura√ß√µes");
    }

    this.config = { ...this.config, ...newConfig };

    // Restart monitoring if interval changed
    if (newConfig.interval || newConfig.enabled !== undefined) {
      this.stopContinuousMonitoring();
      if (this.config.enabled) {
        this.startContinuousMonitoring();
      }
    }

    await this.saveActionPlan();
  }

  setPermissions(permissions: UserPermissions): void {
    this.permissions = permissions;
  }

  // Utilities
  private updateMetrics(): void {
    if (!this.actionPlan) return;

    const tasks = this.actionPlan.tarefas;
    const completed = tasks.filter((t) => t.status === "conclu√≠do");
    const inExecution = tasks.filter((t) => t.status === "em execu√ß√£o");
    const pending = tasks.filter((t) => t.status === "pendente");

    this.actionPlan.m√©tricas_globais = {
      total_tarefas: tasks.length,
      tarefas_conclu√≠das: completed.length,
      tarefas_em_execu√ß√£o: inExecution.length,
      tarefas_pendentes: pending.length,
      tempo_m√©dio_execu√ß√£o: this.calculateAverageExecutionTime(completed),
      taxa_sucesso:
        tasks.length > 0 ? (completed.length / tasks.length) * 100 : 0,
      problemas_detectados:
        this.actionPlan.m√©tricas_globais.problemas_detectados,
      melhorias_aplicadas: completed.length,
      √∫ltima_an√°lise: new Date().toISOString(),
    };
  }

  private calculateAverageExecutionTime(
    completedTasks: IntelligentActionPlanItem[],
  ): number {
    const timesWithData = completedTasks.filter(
      (t) => t.execu√ß√£o?.tempo_real !== undefined,
    );

    if (timesWithData.length === 0) return 0;

    const totalTime = timesWithData.reduce(
      (sum, task) => sum + (task.execu√ß√£o!.tempo_real || 0),
      0,
    );

    return totalTime / timesWithData.length;
  }

  private async saveActionPlan(): Promise<void> {
    if (this.actionPlan) {
      this.actionPlan.atualizado_em = new Date().toISOString();
      localStorage.setItem(
        "intelligent-action-plan-lawdesk-2025",
        JSON.stringify(this.actionPlan),
      );
    }
  }

  private async executeAutomaticTasks(): Promise<void> {
    if (!this.actionPlan || this.isExecuting) return;

    const safeTasks = this.actionPlan.tarefas.filter(
      (task) =>
        task.status === "pendente" &&
        task.prioridade !== "cr√≠tica" &&
        task.origem === "an√°lise autom√°tica" &&
        (!task.depend√™ncias || task.depend√™ncias.length === 0),
    );

    if (safeTasks.length === 0) return;

    this.isExecuting = true;

    try {
      const tasksToExecute = safeTasks.slice(
        0,
        this.config.max_concurrent_executions,
      );

      await Promise.all(
        tasksToExecute.map((task) =>
          this.executeTask(task.id).catch((error) =>
            console.error(
              `Erro na execu√ß√£o autom√°tica da tarefa ${task.id}:`,
              error,
            ),
          ),
        ),
      );
    } finally {
      this.isExecuting = false;
    }
  }

  // Public API methods
  async getTasks(filters?: {
    status?: string;
    module?: ModuleName;
    priority?: string;
    origin?: string;
  }): Promise<IntelligentActionPlanItem[]> {
    if (!this.actionPlan) return [];

    let tasks = this.actionPlan.tarefas;

    if (filters) {
      if (filters.status) {
        tasks = tasks.filter((t) => t.status === filters.status);
      }
      if (filters.module) {
        tasks = tasks.filter((t) => t.m√≥dulo === filters.module);
      }
      if (filters.priority) {
        tasks = tasks.filter((t) => t.prioridade === filters.priority);
      }
      if (filters.origin) {
        tasks = tasks.filter((t) => t.origem === filters.origin);
      }
    }

    return tasks;
  }

  async exportActionPlan(format: "json" | "csv"): Promise<string> {
    if (!this.actionPlan) throw new Error("Plano de a√ß√£o n√£o carregado");

    if (format === "json") {
      return JSON.stringify(this.actionPlan, null, 2);
    } else {
      // CSV export
      const headers = [
        "ID",
        "Tarefa",
        "M√≥dulo",
        "Prioridade",
        "Status",
        "Criado Em",
        "Origem",
      ];
      const rows = this.actionPlan.tarefas.map((task) => [
        task.id,
        task.tarefa,
        task.m√≥dulo,
        task.prioridade,
        task.status,
        task.criado_em,
        task.origem,
      ]);

      return [headers, ...rows].map((row) => row.join(",")).join("\n");
    }
  }
}

export const intelligentActionPlanService = new IntelligentActionPlanService();
