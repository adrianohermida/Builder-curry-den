/**
 * üîê SISTEMA DE PERMISS√ïES GRANULARES
 * 
 * Sistema completo de controle de acesso com:
 * ‚úÖ Permiss√µes por m√≥dulo e a√ß√£o
 * ‚úÖ Perfis hier√°rquicos
 * ‚úÖ Verifica√ß√£o em tempo real
 * ‚úÖ HOCs para prote√ß√£o de componentes
 * ‚úÖ Logs de auditoria autom√°ticos
 * ‚úÖ Integra√ß√£o com GOV.BR (futuro)
 */

import { useMemo } from 'react';
import { useGlobalStore } from '@/stores/useGlobalStore';

// Tipos de permiss√µes
export type Permission = 
  // M√≥dulo CRM
  | 'crm.clientes.visualizar'
  | 'crm.clientes.criar'
  | 'crm.clientes.editar'
  | 'crm.clientes.excluir'
  | 'crm.clientes.exportar'
  
  | 'crm.processos.visualizar'
  | 'crm.processos.criar'
  | 'crm.processos.editar'
  | 'crm.processos.excluir'
  | 'crm.processos.compartilhar'
  
  | 'crm.contratos.visualizar'
  | 'crm.contratos.criar'
  | 'crm.contratos.editar'
  | 'crm.contratos.assinar'
  | 'crm.contratos.excluir'
  
  | 'crm.tarefas.visualizar'
  | 'crm.tarefas.criar'
  | 'crm.tarefas.editar'
  | 'crm.tarefas.atribuir'
  | 'crm.tarefas.excluir'
  
  // M√≥dulo Financeiro
  | 'financeiro.visualizar'
  | 'financeiro.criar'
  | 'financeiro.editar'
  | 'financeiro.aprovar'
  | 'financeiro.excluir'
  | 'financeiro.relatorios'
  
  // M√≥dulo Documentos
  | 'documentos.visualizar'
  | 'documentos.upload'
  | 'documentos.download'
  | 'documentos.editar'
  | 'documentos.excluir'
  | 'documentos.compartilhar'
  | 'documentos.historico'
  
  // M√≥dulo Publica√ß√µes
  | 'publicacoes.visualizar'
  | 'publicacoes.analisar'
  | 'publicacoes.responder'
  | 'publicacoes.arquivar'
  | 'publicacoes.ia'
  
  // M√≥dulo Agenda
  | 'agenda.visualizar'
  | 'agenda.criar'
  | 'agenda.editar'
  | 'agenda.excluir'
  | 'agenda.compartilhar'
  
  // M√≥dulo Atendimento
  | 'atendimento.visualizar'
  | 'atendimento.responder'
  | 'atendimento.transferir'
  | 'atendimento.fechar'
  | 'atendimento.historico'
  
  // M√≥dulo IA
  | 'ia.usar'
  | 'ia.configurar'
  | 'ia.historico'
  | 'ia.creditos'
  
  // Administra√ß√£o
  | 'admin.usuarios.visualizar'
  | 'admin.usuarios.criar'
  | 'admin.usuarios.editar'
  | 'admin.usuarios.excluir'
  | 'admin.configuracoes'
  | 'admin.auditoria'
  | 'admin.sistema'
  | 'admin.integracao'
  
  // Sistema
  | 'sistema.backup'
  | 'sistema.restaurar'
  | 'sistema.logs'
  | 'sistema.monitoramento';

// Perfis de usu√°rio com permiss√µes
export const PERFIS_PERMISSOES: Record<string, Permission[]> = {
  administrador: [
    // Todas as permiss√µes
    'crm.clientes.visualizar', 'crm.clientes.criar', 'crm.clientes.editar', 'crm.clientes.excluir', 'crm.clientes.exportar',
    'crm.processos.visualizar', 'crm.processos.criar', 'crm.processos.editar', 'crm.processos.excluir', 'crm.processos.compartilhar',
    'crm.contratos.visualizar', 'crm.contratos.criar', 'crm.contratos.editar', 'crm.contratos.assinar', 'crm.contratos.excluir',
    'crm.tarefas.visualizar', 'crm.tarefas.criar', 'crm.tarefas.editar', 'crm.tarefas.atribuir', 'crm.tarefas.excluir',
    'financeiro.visualizar', 'financeiro.criar', 'financeiro.editar', 'financeiro.aprovar', 'financeiro.excluir', 'financeiro.relatorios',
    'documentos.visualizar', 'documentos.upload', 'documentos.download', 'documentos.editar', 'documentos.excluir', 'documentos.compartilhar', 'documentos.historico',
    'publicacoes.visualizar', 'publicacoes.analisar', 'publicacoes.responder', 'publicacoes.arquivar', 'publicacoes.ia',
    'agenda.visualizar', 'agenda.criar', 'agenda.editar', 'agenda.excluir', 'agenda.compartilhar',
    'atendimento.visualizar', 'atendimento.responder', 'atendimento.transferir', 'atendimento.fechar', 'atendimento.historico',
    'ia.usar', 'ia.configurar', 'ia.historico', 'ia.creditos',
    'admin.usuarios.visualizar', 'admin.usuarios.criar', 'admin.usuarios.editar', 'admin.usuarios.excluir',
    'admin.configuracoes', 'admin.auditoria', 'admin.sistema', 'admin.integracao',
    'sistema.backup', 'sistema.restaurar', 'sistema.logs', 'sistema.monitoramento'
  ],
  
  advogado: [
    // Permiss√µes completas para trabalho jur√≠dico
    'crm.clientes.visualizar', 'crm.clientes.criar', 'crm.clientes.editar', 'crm.clientes.exportar',
    'crm.processos.visualizar', 'crm.processos.criar', 'crm.processos.editar', 'crm.processos.compartilhar',
    'crm.contratos.visualizar', 'crm.contratos.criar', 'crm.contratos.editar', 'crm.contratos.assinar',
    'crm.tarefas.visualizar', 'crm.tarefas.criar', 'crm.tarefas.editar', 'crm.tarefas.atribuir',
    'financeiro.visualizar', 'financeiro.criar', 'financeiro.editar', 'financeiro.relatorios',
    'documentos.visualizar', 'documentos.upload', 'documentos.download', 'documentos.editar', 'documentos.compartilhar', 'documentos.historico',
    'publicacoes.visualizar', 'publicacoes.analisar', 'publicacoes.responder', 'publicacoes.arquivar', 'publicacoes.ia',
    'agenda.visualizar', 'agenda.criar', 'agenda.editar', 'agenda.excluir', 'agenda.compartilhar',
    'atendimento.visualizar', 'atendimento.responder', 'atendimento.transferir', 'atendimento.fechar', 'atendimento.historico',
    'ia.usar', 'ia.historico'
  ],
  
  estagiario: [
    // Permiss√µes limitadas para estagi√°rios
    'crm.clientes.visualizar',
    'crm.processos.visualizar',
    'crm.contratos.visualizar',
    'crm.tarefas.visualizar', 'crm.tarefas.criar', 'crm.tarefas.editar',
    'financeiro.visualizar',
    'documentos.visualizar', 'documentos.upload', 'documentos.download',
    'publicacoes.visualizar', 'publicacoes.analisar',
    'agenda.visualizar', 'agenda.criar', 'agenda.editar',
    'atendimento.visualizar', 'atendimento.responder',
    'ia.usar'
  ],
  
  cliente: [
    // Permiss√µes b√°sicas para portal do cliente
    'crm.processos.visualizar',
    'crm.contratos.visualizar',
    'documentos.visualizar', 'documentos.download',
    'agenda.visualizar',
    'atendimento.visualizar', 'atendimento.responder'
  ]
};

// Hook principal de permiss√µes
export const usePermissions = () => {
  const user = useGlobalStore((state) => state.user);
  const addAuditLog = useGlobalStore((state) => state.addAuditLog);

  // Calcular permiss√µes do usu√°rio atual
  const userPermissions = useMemo(() => {
    if (!user) return [];
    
    const perfilPermissions = PERFIS_PERMISSOES[user.perfil] || [];
    const customPermissions = user.permissoes || [];
    
    return [...perfilPermissions, ...customPermissions];
  }, [user]);

  // Verificar se tem permiss√£o
  const hasPermission = (permission: Permission): boolean => {
    if (!user) return false;
    
    // Administrador sempre tem todas as permiss√µes
    if (user.perfil === 'administrador') return true;
    
    return userPermissions.includes(permission);
  };

  // Verificar m√∫ltiplas permiss√µes (AND)
  const hasAllPermissions = (permissions: Permission[]): boolean => {
    return permissions.every(permission => hasPermission(permission));
  };

  // Verificar se tem pelo menos uma permiss√£o (OR)
  const hasAnyPermission = (permissions: Permission[]): boolean => {
    return permissions.some(permission => hasPermission(permission));
  };

  // Verificar permiss√£o com log de auditoria
  const checkPermission = (permission: Permission, action?: string): boolean => {
    const hasAccess = hasPermission(permission);
    
    // Log de auditoria para tentativas de acesso negado
    if (!hasAccess && user) {
      addAuditLog({
        usuario: user.email,
        acao: 'acesso_negado',
        modulo: 'permissoes',
        detalhes: `Tentativa de acesso negado para: ${permission}${action ? ` - ${action}` : ''}`,
      });
    }
    
    return hasAccess;
  };

  // Obter permiss√µes por m√≥dulo
  const getModulePermissions = (module: string) => {
    return userPermissions.filter(permission => permission.startsWith(`${module}.`));
  };

  // Verificar se pode acessar m√≥dulo
  const canAccessModule = (module: string): boolean => {
    const modulePermissions = getModulePermissions(module);
    return modulePermissions.length > 0;
  };

  // Obter n√≠vel de acesso (read, write, admin)
  const getAccessLevel = (module: string): 'none' | 'read' | 'write' | 'admin' => {
    const permissions = getModulePermissions(module);
    
    if (permissions.length === 0) return 'none';
    
    const hasWrite = permissions.some(p => 
      p.includes('.criar') || p.includes('.editar') || p.includes('.excluir')
    );
    
    const hasAdmin = permissions.some(p => 
      p.includes('.aprovar') || p.includes('.configurar') || p.includes('.administrar')
    );
    
    if (hasAdmin) return 'admin';
    if (hasWrite) return 'write';
    return 'read';
  };

  return {
    user,
    permissions: userPermissions,
    hasPermission,
    hasAllPermissions,
    hasAnyPermission,
    checkPermission,
    getModulePermissions,
    canAccessModule,
    getAccessLevel,
  };
};

// HOC para proteger componentes
export const withPermission = <P extends object>(
  Component: React.ComponentType<P>,
  requiredPermission: Permission | Permission[],
  fallback?: React.ComponentType | null
) => {
  return (props: P) => {
    const { hasPermission, hasAllPermissions } = usePermissions();
    
    const hasAccess = Array.isArray(requiredPermission) 
      ? hasAllPermissions(requiredPermission)
      : hasPermission(requiredPermission);
    
    if (!hasAccess) {
      if (fallback) {
        const FallbackComponent = fallback;
        return <FallbackComponent />;
      }
      return (
        <div className="flex items-center justify-center h-32 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
          <div className="text-center">
            <div className="w-12 h-12 mx-auto mb-4 text-gray-400">
              üîí
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              Acesso Restrito
            </h3>
            <p className="text-gray-600">
              Voc√™ n√£o tem permiss√£o para acessar este recurso.
            </p>
          </div>
        </div>
      );
    }
    
    return <Component {...props} />;
  };
};

// Hook para verificar permiss√µes espec√≠ficas de m√≥dulos
export const useModulePermissions = (module: string) => {
  const { getModulePermissions, getAccessLevel, canAccessModule } = usePermissions();
  
  return {
    permissions: getModulePermissions(module),
    accessLevel: getAccessLevel(module),
    canAccess: canAccessModule(module),
  };
};

// Componente de prote√ß√£o inline
export const PermissionGuard: React.FC<{
  permission: Permission | Permission[];
  children: React.ReactNode;
  fallback?: React.ReactNode;
}> = ({ permission, children, fallback }) => {
  const { hasPermission, hasAllPermissions } = usePermissions();
  
  const hasAccess = Array.isArray(permission) 
    ? hasAllPermissions(permission)
    : hasPermission(permission);
  
  if (!hasAccess) {
    return <>{fallback || null}</>;
  }
  
  return <>{children}</>;
};

// Hook para verificar permiss√µes de escrita
export const useWritePermissions = (module: string) => {
  const { hasPermission } = usePermissions();
  
  return {
    canCreate: hasPermission(`${module}.criar` as Permission),
    canEdit: hasPermission(`${module}.editar` as Permission),
    canDelete: hasPermission(`${module}.excluir` as Permission),
  };
};

// Hook para verificar permiss√µes espec√≠ficas do cliente
export const useClientPermissions = () => {
  const { user, hasPermission } = usePermissions();
  
  const isClient = user?.perfil === 'cliente';
  
  return {
    isClient,
    canViewOwnProcesses: isClient && hasPermission('crm.processos.visualizar'),
    canViewOwnContracts: isClient && hasPermission('crm.contratos.visualizar'),
    canDownloadDocuments: isClient && hasPermission('documentos.download'),
    canCreateTickets: isClient && hasPermission('atendimento.responder'),
  };
};